const formatJson = (data)=>{
  
    // Get The Entries Object To Be Formatted Separately
    var entries = data.entries?data.entries:[]
    // Formatting Entries
    var formattedEntries = {
        ...data,
        ...entries.map((e) => {
          const labels = []
          const values = []
          return e.values.map((v) => {
            labels.push(v.label)
            values.push(v.value)
            e["values"] = { label: labels, value: values };
            return  e;
          })[0];
        }),
      };
  
      // Remove Entries From The Formatted Entries To Avoid Redundancy
      delete formattedEntries.entries
      // Create Empty Entries Object
      formattedEntries.entries = {}
      // Make the keys Objects within entries the upper level keys to replace the autogenerated keys
      Object.keys(formattedEntries).map(key=>{
        if(formattedEntries[key]!=null &&formattedEntries[key].key){
          formattedEntries['entries'][formattedEntries[key].key] =formattedEntries[key]  
            //Remove The Keys From The Enties Object
            delete formattedEntries[key].key
            // Remove The Autogenerated Keys From The Entries Obj
            delete formattedEntries[key]
        } 
    })
    
    return formattedEntries
    }
    
    module.exports = formatJson;